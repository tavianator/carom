\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename carom.info
@settitle The Carom Physics Engine Manual
@c %**end of header

@copying
Copyright @copyright{} 2007 Tavian Barnes

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1@.
@end quotation
@end copying

@titlepage
@title The Carom Physics Engine Manual
@page
@insertcopying
@end titlepage

@contents

@ifnottex
@node Top
@top The Carom Physics Engine

@insertcopying
@end ifnottex

@menu
* Overview::         An overview of The Carom Physics Engine
* The @code{bigint} Class: bigint. An arbitrary-precision integer
* The @code{scalar} Class: scalar. A multi-precition floating-point number
* The @code{vector} Class: vector. A vector in three dimensions
* The @code{particle} Struct: particle. A particle with mass, position, velocity, and acceleration
* The @code{body} Class: body. A class representing a physical body, i.e. a collection of particles
* The @code{system} Class: system. The top-level class that represents a physical system
* Concept Index::    Concepts
* Function Index::   Functions
* Data Type Index::  Data Types
* Variable Index::   Global variables
@end menu

@node Overview
@chapter Overview

@node bigint
@chapter The @code{bigint} Class

@node scalar
@chapter The @code{scalar} Class

@node vector
@chapter The @code{vector} Class

@node particle
@chapter The @code{particle} Struct

@tindex @code{particle}

The @code{particle} struct represents a point-mass. It is specified in the
following manner:

@quotation
@verbatim
struct particle {
  scalar mass;
  vector position;
  vector velocity;
  vector acceleration;
};
@end verbatim
@end quotation

@node body
@chapter The @code{body} Class

@cindex body
@tindex @code{body}

The @code{body} class represents a body. It stores a collection (specifically,
a linked list) of point-masses (instances of the @code{particle}
struct), and provides methods for inserting, removing, and iterating through
them.

@section The @code{body::iterator} and @code{body::const_iterator} Types

@tindex @code{body::iterator}
@tindex @code{body::const_iterator}

These types are bi-directional iterators, which point to @code{particle}s
contained in @code{body}s.

@section The @code{body::insert} Method

@findex @code{body::insert}

The @code{body::insert} method has the following specification:

@quotation
@code{body::iterator body::insert();}
@end quotation

@code{body::insert} inserts an uninitialized @code{particle} into the
@code{body}, and returns a @code{body::iterator} to it.

@section The @code{body::erase} Method

@findex @code{body::erase}

The @code{body::erase} method has the following specification:

@quotation
@code{void body::erase(body::iterator i);}
@end quotation

@code{body::insert} removes the @code{particle} pointed to by its argument from
the @code{body}.

@section The @code{body::begin} Method

@findex @code{body::begin}

The @code{body::begin} method has the following specifications:

@quotation
@code{body::iterator body::begin();}

@code{body::const_iterator body::begin() const;}
@end quotation

@code{body::begin} returns a @code{body::iterator} to the @code{body}'s
first element, or a @code{body::const_iterator} if the @code{body} is
@code{const}.

@section The @code{body::end} Method

@findex @code{body::end}

The @code{body::end} method has the following specifications:

@quotation
@code{body::iterator body::end();}

@code{body::const_iterator body::end() const;}
@end quotation

@code{body::end} returns a @code{body::iterator} one past the @code{body}'s
last element, or a @code{body::const_iterator} if the @code{body} is
@code{const}.

@section The @code{body::size} Method

@findex @code{body::size}

The @code{body::size} method has the following specification:

@quotation
@code{std::size_t body::size() const;}
@end quotation

@code{body::size} returns the number of @code{particle}s stored in the
@code{body}

@node system
@chapter The @code{system} Class

@cindex physical system
@cindex system
@tindex @code{system}

The @code{system} class represents a physical system. It stores a collection
(specifically, a linked list) of bodies (instances of the @code{body} class),
and provides methods for inserting, removing, and iterating through them.

@section The @code{system::iterator} and @code{system::const_iterator} Types

@tindex @code{system::iterator}
@tindex @code{system::const_iterator}

These types are bi-directional iterators, which point to @code{body}s contained
in @code{system}s.

@section The @code{system::insert} Method

@findex @code{system::insert}

The @code{system::insert} method has the following specification:

@quotation
@code{system::iterator system::insert();}
@end quotation

@code{system::insert} inserts an empty @code{body} into the @code{system}, and
returns a @code{system::iterator} to it.

@section The @code{system::erase} Method

@findex @code{system::erase}

The @code{system::erase} method has the following specification:

@quotation
@code{void system::erase(system::iterator i);}
@end quotation

@code{system::insert} removes the @code{body} pointed to by its argument from
the @code{system}.

@section The @code{system::begin} Method

@findex @code{system::begin}

The @code{system::begin} method has the following specifications:

@quotation
@code{system::iterator system::begin();}

@code{system::const_iterator system::begin() const;}
@end quotation

@code{system::begin} returns a @code{system::iterator} to the @code{system}'s
first element, or a @code{system::const_iterator} if the @code{system} is
@code{const}.

@section The @code{system::end} Method

@findex @code{system::end}

The @code{system::end} method has the following specifications:

@quotation
@code{system::iterator system::end();}

@code{system::const_iterator system::end() const;}
@end quotation

@code{system::end} returns a @code{system::iterator} one past the
@code{system}'s last element, or a @code{system::const_iterator} if the
@code{system} is @code{const}.

@section The @code{system::size} Method

@findex @code{system::size}

The @code{system::size} method has the following specification:

@quotation
@code{std::size_t system::size() const;}
@end quotation

@code{system::size} returns the number of @code{body}s stored in the
@code{system}

@node Concept Index
@unnumbered Concept Index

@printindex cp

@node Function Index
@unnumbered Function Index

@printindex fn

@node Data Type Index
@unnumbered Data Type Index

@printindex tp

@node Variable Index
@unnumbered Variable Index

@printindex vr

@bye
